/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.hyperledger.fabric;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Optional;

import com.google.gson.Gson;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

public class Library {

    public static class Builder {
        private Builder() {
            this.metainf = Optional.empty();
        }

        private Optional<Path> metainf;
        private Path fatJar;
        private Path outputFilename;
        private String label;


        public Builder metainf(Path metainf) {
            this.metainf = Optional.of(metainf.normalize());
            return this;
        }

        public Builder fatjar(Path fatJar) {
            this.fatJar = fatJar.normalize();
            return this;
        }

        public Builder label(String label){
            this.label = label;
            return this;
        }

        public Builder output(Path outputFilename){
            this.outputFilename = outputFilename;
            return this;
        }

        public Library build() {
            if (metainf.isPresent() && !Files.exists(metainf.get())) {
                throw new RuntimeException("Unable to find " + metainf);
            }

            if (fatJar == null || !Files.exists(fatJar)) {
                throw new RuntimeException("FatJar: Unable to find :" + fatJar+":");
            }

            // check directory??
            if (outputFilename == null || !Files.exists(outputFilename.getParent())) {
                throw new RuntimeException("OutputFilename: Unable to find :" + outputFilename +":");
            }
            
            if (label == null){
                throw new RuntimeException("Label is not specified");
            }

            return new Library(metainf.get(), fatJar, outputFilename, label);
        }
    }

    public static Builder newBuilder() {
        return new Builder();
    }


    public static class Metadata{
        String label;
        String path;
        String type="java";
    }

    private Path metainf;
    private Path fatJar;
    private Path outputFilename;
    private String label;

    private Library(Path metainf, Path fatJar,Path outputFilename, String label) {
        this.metainf = metainf;
        this.fatJar = fatJar;
        this.outputFilename = outputFilename;
        this.label = label;
    };

    public void pack() throws IOException {
        byte[] innerTgz;
        
        try (ByteArrayOutputStream fOut = new ByteArrayOutputStream()) {
            BufferedOutputStream buffOut = new BufferedOutputStream(fOut);
            GzipCompressorOutputStream gzOut = new GzipCompressorOutputStream(buffOut);
            TarArchiveOutputStream tOut = new TarArchiveOutputStream(gzOut);

            Path source = this.metainf;

            Files.walkFileTree(source, new SimpleFileVisitor<>() {

                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attributes) {

                    // only copy files, no symbolic links
                    if (attributes.isSymbolicLink()) {
                        return FileVisitResult.CONTINUE;
                    }

                    // get filename

                    Path targetFile = Paths.get("META-INF", source.relativize(file).toString());
                    System.out.println("source=" + source + " file=" + file + " targetFile=" + targetFile);
                    try {
                        TarArchiveEntry tarEntry = new TarArchiveEntry(file.toFile(), targetFile.toString());

                        tOut.putArchiveEntry(tarEntry);

                        Files.copy(file, tOut);

                        tOut.closeArchiveEntry();

                        System.out.printf("file : %s%n", file);

                    } catch (IOException e) {
                        System.err.printf("Unable to tar.gz : %s%n%s%n", file, e);
                    }

                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult visitFileFailed(Path file, IOException exc) {
                    System.err.printf("Unable to tar.gz : %s%n%s%n", file, exc);
                    return FileVisitResult.CONTINUE;
                }

            });

            // add the jar file to the src directory
            TarArchiveEntry jarFileEntry = new TarArchiveEntry(this.fatJar.toFile(),
                    Paths.get("src", "chaincode.jar").toString());
            tOut.putArchiveEntry(jarFileEntry);
            Files.copy(this.fatJar, tOut);
            tOut.closeArchiveEntry();

            tOut.finish();
            tOut.flush();
            tOut.close();
            innerTgz = fOut.toByteArray();
        }

        // create the output
        try (OutputStream fOut = Files.newOutputStream(this.outputFilename)) {
            BufferedOutputStream buffOut = new BufferedOutputStream(fOut);
            GzipCompressorOutputStream gzOut = new GzipCompressorOutputStream(buffOut);
            TarArchiveOutputStream tOut = new TarArchiveOutputStream(gzOut);
            TarArchiveEntry metadataEntry = new TarArchiveEntry("metadata.json");

            Metadata md = new Metadata();
            md.label=this.label;
            
            Gson gson = new Gson();
            byte[] b = gson.toJson(md).getBytes();

            metadataEntry.setSize(b.length);
            tOut.putArchiveEntry(metadataEntry);
            tOut.write(b);
            tOut.closeArchiveEntry();


            TarArchiveEntry codetgz = new TarArchiveEntry("code.tar.gz");
            codetgz.setSize(innerTgz.length);
            tOut.putArchiveEntry(codetgz);
            tOut.write(innerTgz);
            tOut.closeArchiveEntry();


            tOut.finish();
            tOut.flush();
            tOut.close();
        }

    }

}
